Part-1 AngularJS
================

What is AngularJS ?
AngularJS is a JavaScript framework, that helps build applications that run in a web browser.

Who developed AngularJS ?
Google is the company that developed AngularJS. It is an open source project which means it can be freely used, changed, and shared by anyone.

AngularJS is an excellent framework for building both Single Page Applications (SPA) and Line of Business Applications. Many companies are using Angular today, and there are many public facing web sites that are built with Angular.

There is a website, "https://www.madewithangular.com, that has the list of web sites that are built using AngularJS. Within this list you can find many popular websites.

What are the benefits of using AngularJS ?
    1. Dependency Injection : Dependency Injection is something AngularJS does quite well.
    2. Two Way Data-Binding : One of the important feature in AngularJS is the Two Way Data-Binding. The Two Way Data-Binding, keeps the model and view in sync at all times, that is a change in model updates the view and a change in view updates the model. ( Model <==> View )
    3. Testing: Testing is an area where Angular really shines. Angular is designed with testing in mind right from the start. Angular makes it very easy to test any of it's components through both unit testing and end-to-end testing. So there's really no excuse for not testing any of you angular application code.
    4. Model-View-Controller: With angular it is very easy to develop application in a clean MVC way. All you have to do is split your application code into MVC components and connecting them together is done by Angular automatically.
    5. Many more benefits like controlling the behavior of DOM elements using directives and the flexibility that angular filters provide.

We will discuss directives, filters, Modules and Routes etc.. with examples.

To build angular applications you only need one script file and that is angular.js.

To get the script file visit https://angularjs.org.

To get started with angular
    1. Add a reference to the angular script. <script type="text/javascript" language="javascript" src="js/angular.min.js"></script>.
    2. Include ng-app attribute.

What is ng-app ?
In angular, ng-app is called a directive. There are many directives in angular. The ng prefix in directive stands for angular. The ng-app directive is a starting point of AngularJS application. AngularJS will first check for ng-app directive in HTML page after the entire page is loaded. If ng-app directive is found angular bootstrap itself and starts to manage the section of the page that has the ng-app directive.

So obvious next question is, where to place the ng-app directive on the page.
It should be placed at the root of the HTML document, that is at the <html> tag level or at the <body> tag level, so that angular can control the entire page.
However there is nothing stop you from placing it on any other HTML element within in the page. When you do this only that element and it's children are managed by angular.

Double curly braces are called data binding expressions in angular.

All the following are valid expressions in angular.

{{ 1 == 1}} // Evaluates to true

{{ {name: 'Rama', age: 29}.name }} // Returns the name property value as Rama

{{ ['Siri', 'Chandana', 24][1] }} // Returns the first element of the array.

Part-2 AngularJS
================
In this lesion we will discuss below concepts.
1. What is a module in Angular ?
2. Why module is used in Angular ?
3. How to create a module in our application ?
4. What is a controller in Angular ?
5. How to create a controller ?
6. How to register a controller with the module ?
7. How to use the module that we created to bootstrap the angular application ?

What is a module in angular ?

    A module is a container for different parts of your application i.e.,
controllers, services, filters, directives, etc..,

Why module is used in angular ?

    You can think of module as a Main() method in other types of applications (like C, JAVA, etc.,) For example Java application has a Main () method which is entry point into the application. Main() is the responsibility of the application and it wires together the different parts of the application.

Modules are the angular application's equivalent of the Main () method.Modules declaratively specify how the angular application should be bootstrapped.

There are several benefits of the modular approach.It may be difficult to comprehend all those benefits right now, So we will defer the discussion of the benefits to a later video.

How to create a module ?

    Creating a module in angular is straight forward. Use the angular object's module() method to create a module. The angular object is provided by angular framework. The following example, creating a module.

    var myApp = angular.module("myModule", []);

    We have to associate this myApp module to ng-app directive in HTML document ( <body ng-app = "myModule"> )

    The first parameter specifies the name of the module.
    The second parameter specifies the dependencies for this module.

    A module can dependent on other modules. We will discuss an example of module dependencies in later. Right now, the module that we are not creating any dependent on any other external modules. So I am passing an empty array as the value for the second parameter.

What is a controller in angular ?

    In angular, a controller is a JavaScript construct function. The job of the controller is to build a model for the view to display. The model is nothing but the data. In a real world application, the controller may call into web service to retrieve data from the data base for the view to display.

How to create a controller in angular ?
    Simple, create a JavaScript constructor function ( Anonymous function )

    var myCtrl = function ($scope) { // pass the $scope object as a parameter
        $scope.name = "AngularJS"; // we attach the name property to $scope object as model
    }

    Note: Anonymous function is a function definition stored in a variable. They are always invoked (calling) using the variable name.

    myApp.controller ("myController", myCtrl); (or)

    From the above code we are created unnecessary variable call myCtrl. Instead of writing above code, we can write below as well.
    
    myApp.controller ("myController", function ($scope){
        $scope.name = "AngularJS"; // This name property will be available in view
    });

    We have to associate this controller (myController) to ng-controller directive in HTML document. (ng-controller = "myController")

How to register the controller with the module ?

    Use the module object's controller function to register the controller with the module.

    myApp.controller('myController', myCtrl);

    Here is the complete code.

    // Create a module with the help of angular object's module () method.
    
    var myApp = angular.moduel('myModule', []);

    // Create a controller by using anonymous function

    var myCtrl = function ($scope) {
        $scope.name = "AngularJS";
    }

    // Register the controller with the module object's controller() method.

    myApp.controller ("myController", myCtrl);

    The above code can also be written as shown below. Doing this we are eliminating the myCtrl variable.

    //Create a module with the help of angular object's module () method.
    
    var myApp = angular.module('myModule', []);

    //Creating a controller with the help of module object's controller () method and register the controller with the module in single line

    myApp.controller("myController", function ($scope){
        $scope.name = "AngularJS";
    });

What is $scope ?

    $scope is an angular object that is passed to the controller function by the angular framework. We attach the model to the $scope object, which will then be available in the view. Within the view , we use the databinding expression to retrieve the data from the $scope object and display it.

How to use the module that we created to bootstrap the angular application ?
    Associate the module name with ng-app directive.

        ng-app = "myModule"

    Similarly, associate the controller using ng-controller directive.

        ng-controller = "myController"

Part-3 AngularJS (26th Sep 2016)
================ ===============
                                    Controllers In AngularJS
                                    ------------------------
In this we will continue our discussion on controller in angular. This is the continuation of Part-2.

We will discuss 
1. Attaching complex objects to scope object ?
2. What happens if a controller name is mis-spelled ?
3. What happens if a property name in binding expression is mis-spelled ?
4. How to create module, controller and register the controller with the module all in one line ?

The job of the controller is to build a model for the view to display. The controller does this by attaching the model to the scope object. The scope is not the model, it's the data that you attach to the scope object is the model.

In the following example, the scope is not the model. The message property that we have attached to the scope object is the model.

        myApp.controller('myController', function ($scope){
            $scope.message = "AngularJS Tutorial";
        });

The view will then use the data-binding expression to retrieve the model from the scope object. This means the controller is not manipulating the DOM directly, thus keeping that clean separation between the model, view and controller. So when you are developing controllers, make sure, you are not breaking that clean separation between the model, view and the controllers. The controller should only be used for setting up the $scope object and adding behavior it.

1. Attaching complex objects to scope object ?

In the above snippet code, message is a simple property. You can also attach a complex object to the scope object. In the example below, we have an employee object which is complex object within 3 properties attached to model data for the view to display.

        myApp.controller ('myController', function ($scope){
            var employee = {
                firstName: "Rama",
                lastName: "Krishna",
                gender: "Male"
            };

            $scope.employee = employee;
        });

Within the view, we can then retrieve the employee object's properties and display them in the view as shown below.
        
        <div ng-controller = "myController">
            <p>First Name: {{employee.firstName}}</p>
            <p>Last Name: {{employee.lastName}}</p>
            <p>Gender: {{employee.gender}}</p>
        </div>

2. What happens if the controller name is mis-spelled ?

When the controller name is mis-spelled 2 things happen.
    1. An error is raised. To see the error, use browser developer tools (F12)
    2. The binding expression in the view that are in the scope of the controller will not be evaluated.

    If you are using the minified version of the AngularJS script, the error
    message may not be readable. To get readable error message,
        1. In the developers tools, click on the link next to the error.This will lead you to a page, where you can see a much clean error message without all the encoding symbols.
        2. Another option you have, if you are in the development environment, you may use the non-minified version of the AngularJS script, which is produced readable error message.

3. What happens if a property name in the binding expression is mis-spelled ?

Expression evaluation in angular is forgiving, meaning if you misspell a property name in the binding expression, angular will not report any error. It will simply return a null or undefined value.

4. How to create a module, controller and register the controller with module all in one line ?

    Use the method chining mechanism as shown below,

        var myApp = angular
                    .module("myModule", [])
                    .controller("myController", function ($scope) {
                        var employee = {
                            firstName: "Rama",
                            lastName: "Krishna",
                            age: "Male"
                        };

                        $scope.employee = employee;
                    });


